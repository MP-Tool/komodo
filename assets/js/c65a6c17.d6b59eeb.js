"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[543],{7322:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"build-images/pre-build","title":"Pre-build command","description":"Sometimes a command needs to be run before running `docker build`, you can configure this in the pre build section.","source":"@site/docs/build-images/pre-build.md","sourceDirName":"build-images","slug":"/build-images/pre-build","permalink":"/docs/build-images/pre-build","draft":false,"unlisted":false,"editUrl":"https://github.com/moghtech/komodo/tree/main/docsite/docs/build-images/pre-build.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Configuration","permalink":"/docs/build-images/configuration"},"next":{"title":"Builders","permalink":"/docs/build-images/builders"}}');var s=i(4848),t=i(8453);const r={},d="Pre-build command",c={},l=[];function a(e){const n={code:"code",em:"em",h1:"h1",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pre-build-command",children:"Pre-build command"})}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes a command needs to be run before running ",(0,s.jsx)(n.code,{children:"docker build"}),", you can configure this in the ",(0,s.jsx)(n.em,{children:"pre build"})," section."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two fields to pass for ",(0,s.jsx)(n.em,{children:"pre build"}),". the first is ",(0,s.jsx)(n.em,{children:"path"}),", which changes the working directory. To run the command in the root of the repo, just pass ",(0,s.jsx)(n.code,{children:"."}),". The second field is ",(0,s.jsx)(n.em,{children:"command"}),", this is the shell command to be executed after the repo is cloned."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, say your repo had a folder in it called ",(0,s.jsx)(n.code,{children:"scripts"})," with a shell script ",(0,s.jsx)(n.code,{children:"on-clone.sh"}),". You would give ",(0,s.jsx)(n.em,{children:"path"})," as ",(0,s.jsx)(n.code,{children:"scripts"})," and command as ",(0,s.jsx)(n.code,{children:"sh on-clone.sh"}),". Or you could make ",(0,s.jsx)(n.em,{children:"path"})," just ",(0,s.jsx)(n.code,{children:"."})," and then the command would be ",(0,s.jsx)(n.code,{children:"sh scripts/on-clone.sh"}),". Either way works fine."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var o=i(6540);const s={},t=o.createContext(s);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);