"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[846],{8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}},9373:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"permissioning","title":"Permissioning","description":"Komodo has a granular, layer-based permissioning system to provide non-admin users access only to intended Resources.","source":"@site/docs/permissioning.md","sourceDirName":".","slug":"/permissioning","permalink":"/docs/permissioning","draft":false,"unlisted":false,"editUrl":"https://github.com/moghtech/komodo/tree/main/docsite/docs/permissioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Procedures and Actions","permalink":"/docs/procedures"},"next":{"title":"Sync Resources","permalink":"/docs/sync-resources"}}');var i=n(4848),o=n(8453);const t={},l="Permissioning",a={},c=[{value:"User Groups",id:"user-groups",level:2},{value:"Permission Levels",id:"permission-levels",level:2},{value:"Global permissions",id:"global-permissions",level:2},{value:"Administration",id:"administration",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"permissioning",children:"Permissioning"})}),"\n",(0,i.jsx)(s.p,{children:"Komodo has a granular, layer-based permissioning system to provide non-admin users access only to intended Resources."}),"\n",(0,i.jsx)(s.h2,{id:"user-groups",children:"User Groups"}),"\n",(0,i.jsxs)(s.p,{children:["While Komodo can assign permissions to specific users directly, it is recommended to instead ",(0,i.jsx)(s.strong,{children:"create User Groups and assign permissions to them"}),", as if they were a user."]}),"\n",(0,i.jsxs)(s.p,{children:["Users can then be ",(0,i.jsx)(s.strong,{children:"added to multiple User Groups"})," and they ",(0,i.jsx)(s.strong,{children:"inherit the group's permissions"}),", similar to linux permissions."]}),"\n",(0,i.jsxs)(s.p,{children:["For permissioning at scale, users can define ",(0,i.jsx)(s.a,{href:"/docs/sync-resources#user-group",children:(0,i.jsx)(s.strong,{children:"User Groups in Resource Syncs"})}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"permission-levels",children:"Permission Levels"}),"\n",(0,i.jsx)(s.p,{children:"There are 4 permission levels a user / group can be given on a Resource:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"None"}),". The user will not have any access to the resource. The user ",(0,i.jsx)(s.strong,{children:"will not see it in the GUI, and it will not show up if the user queries the Komodo API directly"}),". All attempts to view or update the resource will be blocked. This is the default for non-admins, unless using ",(0,i.jsx)(s.code,{children:"KOMODO_TRANSPARENT_MODE=true"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Read"}),". This is the first permission level that grants any access. It will enable the user to ",(0,i.jsx)(s.strong,{children:"see the resource in the GUI, read the configuration, and see any logs"}),". Any attempts to update configuration or trigger any action ",(0,i.jsx)(s.strong,{children:"will be blocked"}),".  Using ",(0,i.jsx)(s.code,{children:"KOMODO_TRANSPARENT_MODE=true"})," will make this level the base level on all resources, for all users."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Execute"}),". This level will allow the user to execute actions on the resource, ",(0,i.jsx)(s.strong,{children:"like send a build command"})," or ",(0,i.jsx)(s.strong,{children:"trigger a redeploy"}),". The user will still be blocked from updating configuration on the resource."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Write"}),". The user has full access to the resource, ",(0,i.jsx)(s.strong,{children:"they can execute any actions, update the configuration, and delete the resource"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"global-permissions",children:"Global permissions"}),"\n",(0,i.jsx)(s.p,{children:"Users or User Groups can be given a base permission level on all Resources of a particular type, such as Stack.\nIn TOML form, this looks like:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-toml",children:'[[user_group]]\nname = "groupo"\nusers = ["mbecker20", "karamvirsingh98"]\nall.Build = "Execute" # <- Group members can run all builds (but not update config),\nall.Stack = "Read"    # <- And see all Stacks / logs (not deploy / update).\n'})}),"\n",(0,i.jsx)(s.p,{children:"A user / group can still be given a greater permission level on select resources:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-toml",children:'permissions = [\n  { target.type = "Stack", target.id = "my-stack", level = "Execute" },\n  # Use regex to match multiple resources, for example give john execute on all of their Stacks\n  { target.type = "Stack", target.id = "\\\\^john-(.+)$\\\\", level = "Execute" },\n]\n'})}),"\n",(0,i.jsx)(s.h2,{id:"administration",children:"Administration"}),"\n",(0,i.jsxs)(s.p,{children:["Users can be given Admin priviledges by a ",(0,i.jsx)(s.code,{children:"Super Admin"})," (only the first user is given this status, set with ",(0,i.jsx)(s.code,{children:"super_admin: true"}),' on a User document in database). Super admins will see the "Make Admin" button when on a User page ',(0,i.jsx)(s.code,{children:"/users/${user_id}"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"These users have unrestricted access to all Komodo Resources. Additionally, these users can update other (non-admin) user's permissions on resources."}),"\n",(0,i.jsxs)(s.p,{children:["Komodo admins are responsible for managing user accounts as well. When a user logs into Komodo for the first time, they will not immediately be granted access (this can changed with ",(0,i.jsx)(s.code,{children:"KOMODO_ENABLE_NEW_USERS=true"}),"). An admin must first ",(0,i.jsx)(s.strong,{children:"enable"})," the user, which can be done from the ",(0,i.jsx)(s.code,{children:"Users"})," tab on ",(0,i.jsx)(s.code,{children:"Settings"})," page. Users can also be ",(0,i.jsx)(s.strong,{children:"disabled"})," by an admin at any time, which blocks all their access to the GUI and API."]}),"\n",(0,i.jsx)(s.p,{children:"Users also have some configurable global permissions, these are:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"create server permission"}),"\n",(0,i.jsx)(s.li,{children:"create build permission"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Only users with these permissions (as well as admins) can add additional servers to Komodo, and can create additional builds, respectively."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);